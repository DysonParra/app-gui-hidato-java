/*
 * @fileoverview {FileName} se encarga de realizar tareas especificas.
 *
 * @version             1.0
 *
 * @author              Dyson Arley Parra Tilano <dysontilano@gmail.com>
 * Copyright (C) Dyson Parra
 *
 * @History v1.0 --- La implementacion de {FileName} fue realizada el 31/07/2022.
 * @Dev - La primera version de {FileName} fue escrita por Dyson A. Parra T.
 */
package com.project.dev.hidato.frames;

import com.project.dev.Application;
import com.project.dev.hidato.code.Tablero;
import com.project.dev.hidato.code.Validator;
import javax.swing.JOptionPane;

/**
 * TODO: Definición de {@code NewFrame}.
 *
 * @author Dyson Parra
 * @since 1.8
 */
public class NewFrame extends javax.swing.JFrame {

    /**
     * TODO: Definición de {@code newFrame}.
     *
     */
    public NewFrame() {
        initComponents();

        // Pone título a la ventana.
        this.setTitle("Nuevo Hidato");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        row_Text = new javax.swing.JTextField();
        col_Text = new javax.swing.JTextField();
        level_Text = new javax.swing.JTextField();
        row_Label = new javax.swing.JLabel();
        col_Label = new javax.swing.JLabel();
        level_Label = new javax.swing.JLabel();
        accept_Button = new javax.swing.JButton();
        cancel_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label.setText("Escriba las especificaciones del hidato");

        row_Label.setText("Cantidad de filas");

        col_Label.setText("Dificultad (1, 2 ó 3)");

        level_Label.setText("Cantidad de columnas");

        accept_Button.setText("Aceptar");
        accept_Button.addActionListener(this::accept_ButtonActionPerformed);

        cancel_Button.setText("Cancelar");
        cancel_Button.addActionListener(this::cancel_ButtonActionPerformed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 62, Short.MAX_VALUE)
                                .addComponent(label)
                                .addGap(65, 65, 65))
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(75, 75, 75)
                                                .addComponent(accept_Button)
                                                .addGap(73, 73, 73)
                                                .addComponent(cancel_Button))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(85, 85, 85)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(row_Label)
                                                        .addComponent(col_Label)
                                                        .addComponent(level_Label))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(level_Text)
                                                        .addComponent(col_Text)
                                                        .addComponent(row_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(label)
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(row_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(row_Label))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(col_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(level_Label))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(level_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(col_Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(accept_Button)
                                        .addComponent(cancel_Button))
                                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * TODO: Definición de {@code accept_ButtonActionPerformed}.
     *
     * @param evt
     */
    private void accept_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accept_ButtonActionPerformed
        String rowIng;                                                          // rowIng almacenará la cantidad de filas ingresadas.
        String colIng;                                                          // colIng almacenará la cantidad de columnas ingresadas.
        String levelIng;                                                        // levelIng almacenará la dificultad ingresada.

        // Pregunta si desea crear el hidato.
        int ax = JOptionPane.showConfirmDialog(null, "Está seguro que desea crear el hidato");

        // En caso de dar ques si.
        if (ax == JOptionPane.YES_OPTION) {
            // Evalúa si los campos de filas, columnas y nivel están llenos.
            if ("".equals(row_Text.getText()) || "".equals(col_Text.getText()) || "".equals(level_Text.getText())) {
                // Escribe el mensaje si hay alguno vacío.
                JOptionPane.showMessageDialog(null, "Llene todos los campos e intente nuevamente");
            } // Si todos los campos tienen algo escrito.
            else {
                Tablero tablero = new Tablero();                                // Crea instancia de tablero.
                Validator validar = new Validator();                            // Crea instancia de validar.
                rowIng = row_Text.getText().replaceAll(" ", "");                // A rowIng le lleva las filas sin espacios.
                colIng = col_Text.getText().replaceAll(" ", "");                // A colIng le lleva las columnas sin espacios.
                levelIng = level_Text.getText().replaceAll(" ", "");            // A levelIng le lleva el nivel sin espacios.

                // Evalúa Ss alguno de los campos no es un número entero.
                if (validar.validarNumero(rowIng) == false || validar.validarNumero(colIng) == false || validar.validarNumero(levelIng) == false) {
                    // Escribe el mensaje si alguno de los tres campos no contiene un número entero.
                    JOptionPane.showMessageDialog(null, "Los campos deben llevar números enteros");
                } // Si todos los campos contienen números enteros.
                else {
                    // Almacena los campos escritos como int. Como ya evaluó que son números enteros, no saldrán exception.
                    Application.cantRows = Integer.parseInt(row_Text.getText());     // A cantRows le lleva lo que hay en el campo de filas.
                    Application.cantCols = Integer.parseInt(col_Text.getText());     // A cantCols le lleva lo que hay en el campo de columnas.
                    Application.level = Integer.parseInt(level_Text.getText());      // A level le lleva lo que hay en el campo de nivel.

                    // Evalúa si las filas y columnas son menos de 3 cada una.
                    if (Application.cantRows < 3 || Application.cantCols < 3) {
                        // Escribe el mensaje indicando que el hidato a crear es muy pequeño.
                        JOptionPane.showMessageDialog(null, "El Hidato debe tener mínimo" + "\ntres filas y tres columnas");
                    } // Evalúa si el nivel no está entre 1 y 3.
                    else if (Application.level > 3 || Application.level < 1) {
                        // Indica que el nivel de dificultad no es válido si no es 1,2 ó 3.
                        JOptionPane.showMessageDialog(null, "La dificultad debe ser un número entre 1 y 3");
                    } // Si los datos son válidos.
                    else {
                        // A matrix_Compete le asigna una matrix vacía con cantidad de filas y de columnas ingresadas.
                        Application.matrix_Complete = tablero.newMatrix(Application.cantRows, Application.cantCols);

                        // Llena la matrix con llenarMatrix.
                        Application.matrix_Complete = tablero.fillMatrix(Application.matrix_Complete);

                        // A matrix_With_Level le asigna una copia de matrix_Complete.
                        Application.matrix_With_Level = tablero.duplicarMatrix(Application.matrix_Complete);

                        // A matrix_With_level le pone n-casillas en cero según el nivel de dificultad.
                        Application.matrix_With_Level = tablero.asignarLevel(Application.matrix_With_Level, Application.level);

                        // A jsCrollPane1 le lleva matrix_With_level almacenada en un JTable y pintada, usando matrixToJTable.
                        Application.jScrollPane1 = tablero.matrixToJTable(Application.matrix_With_Level, Application.jScrollPane1, Application.Table);

                        // Cierra la ventana actual.
                        dispose();
                        // Redimensiona Main_Frame, y le pasa "new" como parámetro para que muestre el mensaje de creación exitosa.
                        tablero.resizeHidato("new");

                        // A Application.loadOrNew le lleva 1 indicando que no hay que calcular la solución del Application al dar en mostrar solución, puesto que esta ya se encuentra en Application.matrix_Complete.
                        Application.loadOrNew = 1;
                    }
                }
            }
        }

    }//GEN-LAST:event_accept_ButtonActionPerformed

    /**
     * TODO: Definición de {@code cancel_ButtonActionPerformed}.
     *
     * @param evt
     */
    private void cancel_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_ButtonActionPerformed
        // Cierra la ventana si se da al boton cancelar.
        dispose();
    }//GEN-LAST:event_cancel_ButtonActionPerformed

    /**
     * Entrada principal del sistema.
     *
     * @param args argumentos de la linea de comandos.
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(() -> {
            new NewFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accept_Button;
    private javax.swing.JButton cancel_Button;
    private javax.swing.JLabel col_Label;
    private javax.swing.JTextField col_Text;
    private javax.swing.JLabel label;
    private javax.swing.JLabel level_Label;
    private javax.swing.JTextField level_Text;
    private javax.swing.JLabel row_Label;
    private javax.swing.JTextField row_Text;
    // End of variables declaration//GEN-END:variables
}
